plugins {
    id 'com.android.library'
}

android {
    namespace 'com.google.unity.plugin'
    compileSdk 34

    defaultConfig {
        minSdk 28
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        versionCode 1
        versionName '1.1'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation project(path: ':UnityActivity')
    compileOnly files('libs/classes.jar')
    implementation 'androidx.webkit:webkit:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
}

task buildAndDeploy() {
    dependsOn ':Plugin:assembleDebug', ':Plugin:renameAAR'
    finalizedBy(':Plugin:copyAARDebug')
}

tasks.register('renameAAR') {
    dependsOn(':Plugin:bundleDebugAar')
    doLast {
        def outputFolder = [buildDir.absolutePath, 'outputs', 'aar'].join(File.separator)
        println("outputFolder " + outputFolder)

        def source = [outputFolder, "${project.name}-debug.aar"].join(File.separator)
        if (!file(source).exists())
            return

        def renamed = [outputFolder, "UnityANR-Plugin.aar"].join(File.separator)
        println("Renaming library " + source + " to " + renamed)
        ant.move(file: source, tofile: renamed)
    }
}

tasks.register('copyAARDebug') {
    dependsOn('renameAAR')

    doLast {

        def outputPath = [buildDir.absolutePath, 'outputs', 'aar','UnityANR-Plugin.aar'].join(File.separator)
        println(outputPath)

        copy {
            from outputPath
            into "PATH TO EXPORTED BUILD\\unityLibrary\\libs"
        }
    }

}

afterEvaluate {
    assembleDebug.finalizedBy('copyAARDebug')
}